[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson.objectid",
        "description": "bson.objectid",
        "isExtraImport": true,
        "detail": "bson.objectid",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "Retry",
        "importPath": "requests.packages.urllib3.util.retry",
        "description": "requests.packages.urllib3.util.retry",
        "isExtraImport": true,
        "detail": "requests.packages.urllib3.util.retry",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'grant_type': 'client_credentials',\n        'scope': 'data:read data:write data:create bucket:create bucket:read'\n    }\n    response = requests.post(auth_url, data=auth_data, timeout=10)\n    response.raise_for_status()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_bucket",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_bucket(access_token):\n    bucket_key = f'bucket_{uuid.uuid4()}'\n    bucket_url = 'https://developer.api.autodesk.com/oss/v2/buckets'\n    headers = {\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'application/json'\n    }\n    bucket_data = {\n        'bucketKey': bucket_key,\n        'policyKey': 'transient'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "translate_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def translate_file(access_token, bucket_key, object_name):\n    urn = base64.urlsafe_b64encode(f'urn:adsk.objects:os.object:{bucket_key}/{object_name}'.encode()).decode().strip('=')\n    translate_url = 'https://developer.api.autodesk.com/modelderivative/v2/designdata/job'\n    headers = {\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'application/json'\n    }\n    translate_data = {\n        'input': {\n            'urn': urn",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_to_imgur",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_to_imgur(image_file):\n    session = requests.Session()\n    retry = Retry(\n        total=5,\n        backoff_factor=0.3,\n        status_forcelist=[500, 502, 503, 504],\n    )\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/collections', methods=['GET'])\ndef get_collections():\n    collections = db.list_collection_names()\n    return jsonify(collections)\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'rvtFile' not in request.files or 'imageFile' not in request.files:\n        return jsonify({'message': 'No file part'})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_collections",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_collections():\n    collections = db.list_collection_names()\n    return jsonify(collections)\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'rvtFile' not in request.files or 'imageFile' not in request.files:\n        return jsonify({'message': 'No file part'})\n    rvt_file = request.files['rvtFile']\n    image_file = request.files['imageFile']\n    name = request.form.get('name')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_file():\n    if 'rvtFile' not in request.files or 'imageFile' not in request.files:\n        return jsonify({'message': 'No file part'})\n    rvt_file = request.files['rvtFile']\n    image_file = request.files['imageFile']\n    name = request.form.get('name')\n    location = request.form.get('location')\n    collection_name = request.form.get('collection')\n    input_link = request.form.get('input_link')\n    if rvt_file.filename == '':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_documents",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_documents(collection_name):\n    limit = int(request.args.get('limit', 10))\n    skip = int(request.args.get('skip', 0))\n    search_query = request.args.get('search', '')\n    collection = db[collection_name]\n    query = {'$or': [{'name': {'$regex': search_query, '$options': 'i'}}, {'location': {'$regex': search_query, '$options': 'i'}}]} if search_query else {}\n    documents = list(collection.find(query).skip(skip).limit(limit))\n    for doc in documents:\n        doc['_id'] = str(doc['_id'])\n    return jsonify(documents)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_document",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_document(collection_name, document_id):\n    data = request.json\n    collection = db[collection_name]\n    result = collection.update_one({'_id': ObjectId(document_id)}, {'$set': data})\n    if result.matched_count == 0:\n        return jsonify({'message': 'Document not found'}), 404\n    return jsonify({'message': 'Document updated successfully'})\n@app.route('/collection/<collection_name>/document/<document_id>', methods=['DELETE'])\ndef delete_document(collection_name, document_id):\n    collection = db[collection_name]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_document",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_document(collection_name, document_id):\n    collection = db[collection_name]\n    result = collection.delete_one({'_id': ObjectId(document_id)})\n    if result.deleted_count == 0:\n        return jsonify({'message': 'Document not found'}), 404\n    return jsonify({'message': 'Document deleted successfully'})\nif __name__ == '__main__':\n    app.run(debug=True, port=5000)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Cấu hình thư mục tải lên\napp.config['UPLOAD_FOLDER'] = 'uploads'\n# Đảm bảo thư mục tải lên tồn tại\nif not os.path.exists(app.config['UPLOAD_FOLDER']):\n    os.makedirs(app.config['UPLOAD_FOLDER'])\n# Cấu hình Imgur\nIMGUR_CLIENT_ID = 'f8b1f35e5690a24'\nIMGUR_CLIENT_SECRET = '59213a42ba249f295354daf2f2f12a980dc009e6'\nclient_id = '8nDGPR55nVA4GWG46L7kayavng4osxT1V2HGAOMBCRQH692R'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = 'uploads'\n# Đảm bảo thư mục tải lên tồn tại\nif not os.path.exists(app.config['UPLOAD_FOLDER']):\n    os.makedirs(app.config['UPLOAD_FOLDER'])\n# Cấu hình Imgur\nIMGUR_CLIENT_ID = 'f8b1f35e5690a24'\nIMGUR_CLIENT_SECRET = '59213a42ba249f295354daf2f2f12a980dc009e6'\nclient_id = '8nDGPR55nVA4GWG46L7kayavng4osxT1V2HGAOMBCRQH692R'\nclient_secret = 'jyxdCnzmGoSz7tQSLo1OAgGGSIwuy2zUg5rbAMzLNpyyR62Innx0vJnMLc0odAuI'\nmongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "IMGUR_CLIENT_ID",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "IMGUR_CLIENT_ID = 'f8b1f35e5690a24'\nIMGUR_CLIENT_SECRET = '59213a42ba249f295354daf2f2f12a980dc009e6'\nclient_id = '8nDGPR55nVA4GWG46L7kayavng4osxT1V2HGAOMBCRQH692R'\nclient_secret = 'jyxdCnzmGoSz7tQSLo1OAgGGSIwuy2zUg5rbAMzLNpyyR62Innx0vJnMLc0odAuI'\nmongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\ndb = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "IMGUR_CLIENT_SECRET",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "IMGUR_CLIENT_SECRET = '59213a42ba249f295354daf2f2f12a980dc009e6'\nclient_id = '8nDGPR55nVA4GWG46L7kayavng4osxT1V2HGAOMBCRQH692R'\nclient_secret = 'jyxdCnzmGoSz7tQSLo1OAgGGSIwuy2zUg5rbAMzLNpyyR62Innx0vJnMLc0odAuI'\nmongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\ndb = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client_id",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client_id = '8nDGPR55nVA4GWG46L7kayavng4osxT1V2HGAOMBCRQH692R'\nclient_secret = 'jyxdCnzmGoSz7tQSLo1OAgGGSIwuy2zUg5rbAMzLNpyyR62Innx0vJnMLc0odAuI'\nmongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\ndb = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'grant_type': 'client_credentials',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client_secret",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client_secret = 'jyxdCnzmGoSz7tQSLo1OAgGGSIwuy2zUg5rbAMzLNpyyR62Innx0vJnMLc0odAuI'\nmongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\ndb = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'grant_type': 'client_credentials',\n        'scope': 'data:read data:write data:create bucket:create bucket:read'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mongo_client",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "mongo_client = MongoClient('mongodb+srv://ngophuc2911:phuc29112003@cluster0.buhheri.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')\ndb = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'grant_type': 'client_credentials',\n        'scope': 'data:read data:write data:create bucket:create bucket:read'\n    }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = mongo_client['test']\ndef get_access_token():\n    auth_url = 'https://developer.api.autodesk.com/authentication/v1/authenticate'\n    auth_data = {\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'grant_type': 'client_credentials',\n        'scope': 'data:read data:write data:create bucket:create bucket:read'\n    }\n    response = requests.post(auth_url, data=auth_data, timeout=10)",
        "detail": "app",
        "documentation": {}
    }
]